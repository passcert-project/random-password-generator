inline fn rng(reg u64 range) -> reg u64 {
    reg u64 rand_number;
    rand_number = #RDRAND();
    rand_number = rand_number % range; //FIXME MAKE THE DISTRIBUTION UNIFORM
    return rand_number;
}

inline fn random_char_generator(reg u64 range, stack u8[76] set) -> reg u8 {
    reg u8 char;
    reg u64 choice;
    choice = rng(range);
    char = set[(int)choice];
    return char;
}

inline fn permutation(reg u64 p_string, reg u64 string_len) {
    reg u64 i, j;
    reg u8 aux;
    i = string_len;
    while (i > 0) {
        j = rng(i);
        i = i - 1;
        aux = (u8) [p_string + i];
        (u8) [p_string + i] = (u8) [p_string + j];
        (u8) [p_string + j] = aux;
    }
}

export fn generatePw(reg u64 length, reg u64 lowercase_bool, reg u64 uppercase_bool, reg u64 numbers_bool, reg u64 special_bool, reg u64 p_output) {
    // General purpose registers
    reg u8 tmp8;
    reg u64 tmp64_1, tmp64_2;
    // Size of the set of chars (max index)
    reg u64 max_char;
    // Registers used for iterations
    reg u64 i;
    reg u64 i_set;
    // Stack arrays that store the different char sets
    stack u8[76] union_set;
    stack u8[26] lowercase_set;
    stack u8[26] uppercase_set;
    stack u8[10] numbers_set;
    stack u8[15] special_set;

    /////////////////////////////////      Sets of characters     ////////////////////////////////////
    //                                                                                              //
    //  Lowercase: {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}   //
    //  Uppercase: {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z}   //
    //  Numbers: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}                                                     //
    //  Special Characters: {!, ?, #, $, %, &, +, -, *, _, @, :, ;, =}                              //
    //                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////

    // Initialize the sets. The values are the ASCII codes of the different characters
    lowercase_set[0] = 97;
    lowercase_set[1] = 98;
    lowercase_set[2] = 99;
    lowercase_set[3] = 100;
    lowercase_set[4] = 101;
    lowercase_set[5] = 102;
    lowercase_set[6] = 103;
    lowercase_set[7] = 104;
    lowercase_set[8] = 105;
    lowercase_set[9] = 106;
    lowercase_set[10] = 107;
    lowercase_set[11] = 108;
    lowercase_set[12] = 109;
    lowercase_set[13] = 110;
    lowercase_set[14] = 111;
    lowercase_set[15] = 112;
    lowercase_set[16] = 113;
    lowercase_set[17] = 114;
    lowercase_set[18] = 115;
    lowercase_set[19] = 116;
    lowercase_set[20] = 117;
    lowercase_set[21] = 118;
    lowercase_set[22] = 119;
    lowercase_set[23] = 120;
    lowercase_set[24] = 121;
    lowercase_set[25] = 122;
    uppercase_set[0] = 65;
    uppercase_set[1] = 66;
    uppercase_set[2] = 67;
    uppercase_set[3] = 68;
    uppercase_set[4] = 69;
    uppercase_set[5] = 70;
    uppercase_set[6] = 71;
    uppercase_set[7] = 72;
    uppercase_set[8] = 73;
    uppercase_set[9] = 74;
    uppercase_set[10] = 75;
    uppercase_set[11] = 76;
    uppercase_set[12] = 77;
    uppercase_set[13] = 78;
    uppercase_set[14] = 79;
    uppercase_set[15] = 80;
    uppercase_set[16] = 81;
    uppercase_set[17] = 82;
    uppercase_set[18] = 83;
    uppercase_set[19] = 84;
    uppercase_set[20] = 85;
    uppercase_set[21] = 86;
    uppercase_set[22] = 87;
    uppercase_set[23] = 88;
    uppercase_set[24] = 89;
    uppercase_set[25] = 90;
    numbers_set[0] = 48;
    numbers_set[1] = 49;
    numbers_set[2] = 50;
    numbers_set[3] = 51;
    numbers_set[4] = 52;
    numbers_set[5] = 53;
    numbers_set[6] = 54;
    numbers_set[7] = 55;
    numbers_set[8] = 56;
    numbers_set[9] = 57;
    special_set[0] = 33;
    special_set[1] = 63;
    special_set[2] = 35;
    special_set[3] = 36;
    special_set[4] = 37;
    special_set[5] = 38;
    special_set[6] = 43;
    special_set[7] = 45;
    special_set[8] = 42;
    special_set[9] = 95;
    special_set[10] = 64;
    special_set[11] = 58;
    special_set[12] = 59;
    special_set[13] = 61;

    // Initialize union set
    i = 0;
    while (i < 76) {
        union_set[(int)i] = 0;
        i += 1;
    }    

    // Initialize the set of characters according to user policies
    i_set = 0;
    if (lowercase_bool == 1) {
        i = 0;
        while (i < 26) {
            tmp8 = lowercase_set[(int)i];
            union_set[(int)i_set] = tmp8;
            i += 1;
            i_set += 1;
        }    
    }
    if (uppercase_bool == 1) {
        i = 0;
        while (i < 26) {
            tmp8 = uppercase_set[(int)i];
            union_set[(int)i_set] = tmp8;
            i += 1;
            i_set += 1;
        }    
    }
    if (numbers_bool == 1) {
        i = 0;
        while (i < 10) {
            tmp8 = numbers_set[(int)i];
            union_set[(int)i_set] = tmp8;
            i += 1;
            i_set += 1;
        }    
    }
    if (special_bool == 1) {
        i = 0;
        while (i < 14) {
            tmp8 = special_set[(int)i];
            union_set[(int)i_set] = tmp8;
            i += 1;
            i_set += 1;
        }    
    }

    // Get max possible char
    tmp64_1 = 26;
    max_char = tmp64_1 * lowercase_bool;
    tmp64_1 = 26;
    tmp64_2 = tmp64_1 * uppercase_bool;
    max_char = max_char + tmp64_2;
    tmp64_1 = 10;
    tmp64_2 = tmp64_1 * numbers_bool;
    max_char = max_char + tmp64_2;
    tmp64_1 = 14;
    tmp64_2 = tmp64_1 * special_bool;
    max_char = max_char + tmp64_2;

    // Generate password from the set of characters available
    i = 0;
    while (i < length) {
        tmp8 = random_char_generator(max_char, union_set);
        (u8) [p_output + i] = tmp8;
        i += 1;
    }

    // Generate random permutation of string
    permutation(p_output, length);
    
    // Make sure last character is \0
    [p_output + length] = 0;
}