inline fn rng(reg u64 range) -> reg u64 {

    reg u64 rand_number, max_value, tmp1, tmp2;

    max_value = 18446744073709551616;   // 2^64 max uint 64bits
    tmp1 = range;
    max_value = max_value / tmp1;
    max_value = max_value * tmp1;
    max_value = max_value - 1;
    rand_number = #RDRAND();

    while(max_value < rand_number) {
        rand_number = #RDRAND();
    }

    tmp2 = rand_number;
    tmp2 = tmp2 % tmp1;

    return tmp2;
}

inline fn random_char_generator(reg u64 range, stack u8[76] set) -> reg u8 {
    reg u8 char;
    reg u64 choice;
    choice = rng(range);
    char = set[(int)choice];
    return char;
}

inline fn permutation(reg u64 p_string, reg u64 string_len) {
    reg u64 i, j;
    reg u8 aux;
    i = string_len;
    while (i > 0) {
        j = rng(i);
        i = i - 1;
        aux = (u8) [p_string + i];
        (u8) [p_string + i] = (u8) [p_string + j];
        (u8) [p_string + j] = aux;
    }
}

inline fn define_union_set(reg u64 lowercase_max, reg u64 uppercase_max, reg u64 numbers_max, reg u64 special_max, stack u8[76] lowercase_set,
    stack u8[76] uppercase_set, stack u8[76] numbers_set, stack u8[76] special_set, stack u8[76] union_set) -> reg u64, stack u8[76] {
    
    reg u8 tmp;
    reg u64 i, i_set;
    
    i_set = 0;

    if (lowercase_max > 0) {
        i = 0;
        while (i < 26) {
            tmp = lowercase_set[(int)i];
            union_set[(int)i_set] = tmp;
            i += 1;
            i_set += 1;
        }    
    }
    if (uppercase_max > 0) {
        i = 0;
        while (i < 26) {
            tmp = uppercase_set[(int)i];
            union_set[(int)i_set] = tmp;
            i += 1;
            i_set += 1;
        }    
    }
    if (numbers_max > 0) {
        i = 0;
        while (i < 10) {
            tmp = numbers_set[(int)i];
            union_set[(int)i_set] = tmp;
            i += 1;
            i_set += 1;
        }    
    }
    if (special_max > 0) {
        i = 0;
        while (i < 14) {
            tmp = special_set[(int)i];
            union_set[(int)i_set] = tmp;
            i += 1;
            i_set += 1;
        }    
    }

    return i_set, union_set;
}

export fn generate_password(reg u64 policy_addr, reg u64 output_addr) -> reg u64 {

    // General purpose registers
    reg u8 tmp8;
    reg u64 tmp64_1, tmp64_2;
    // Registers used for iterations
    reg u64 i, i_set, i_filled;
    // Stack arrays that store the different char sets
    stack u8[76] lowercase_set;
    stack u8[76] uppercase_set;
    stack u8[76] numbers_set;
    stack u8[76] special_set;
    stack u8[76] union_set;
    // Variables that stor min and max values of characters to be generated
    stack u64 length, lowercase_min, uppercase_min, numbers_min, special_min, lowercase_max, uppercase_max, numbers_max, special_max;
    // Output
    reg u64 output;

    /////////////////////////////////      Sets of characters     ////////////////////////////////////
    //                                                                                              //
    //  Lowercase: {a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z}   //
    //  Uppercase: {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z}   //
    //  Numbers: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}                                                     //
    //  Special Characters: {!, ?, #, $, %, &, +, -, *, _, @, :, ;, =}                              //
    //                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////

    // Get values from the policy
    length          = [policy_addr + 0];
    lowercase_min   = [policy_addr + 8];
    lowercase_max   = [policy_addr + 16];
    uppercase_min   = [policy_addr + 24];
    uppercase_max   = [policy_addr + 32];
    numbers_min     = [policy_addr + 40];
    numbers_max     = [policy_addr + 48];
    special_min     = [policy_addr + 56];
    special_max     = [policy_addr + 64];

    
    ////////////////////////////
    // VERIFICATIONS OF INPUT //
    ////////////////////////////

    // Length does not exceed maximum length of 200
    tmp64_1 = length;
    if (tmp64_1 <=s 200) {
    // Length is not negative
    if (tmp64_1 >=s 0) {
    // Min values are not negative
    tmp64_1 = lowercase_min;
    if (tmp64_1 >=s 0) {
    tmp64_1 = uppercase_min;
    if (tmp64_1 >=s 0) {
    tmp64_1 = numbers_min;
    if (tmp64_1 >=s 0) {
    tmp64_1 = special_min;
    if (tmp64_1 >=s 0) {
    // Max values are larger or equal to min values
    tmp64_1 = lowercase_max;
    tmp64_2 = lowercase_min;
    if (tmp64_1 >= tmp64_2) {
    tmp64_1 = uppercase_max;
    tmp64_2 = uppercase_min;
    if (tmp64_1 >= tmp64_2) {
    tmp64_1 = numbers_max;
    tmp64_2 = numbers_min;
    if (tmp64_1 >= tmp64_2) {
    tmp64_1 = special_max;
    tmp64_2 = special_min;
    if (tmp64_1 >= tmp64_2) {
    // Sum of minimum values do not exceed password length
    tmp64_1 = lowercase_min;
    tmp64_2 = uppercase_min;
    tmp64_1 += tmp64_2;
    tmp64_2 = numbers_min;
    tmp64_1 += tmp64_2;
    tmp64_2 = special_min;
    tmp64_1 += tmp64_2;
    if (tmp64_1 <= length) {
    // Sum of maximum values satisfies the password length
    tmp64_1 = lowercase_max;
    tmp64_2 = uppercase_max;
    tmp64_1 += tmp64_2;
    tmp64_2 = numbers_max;
    tmp64_1 += tmp64_2;
    tmp64_2 = special_max;
    tmp64_1 += tmp64_2;
    if (tmp64_1 >= length) {


    ////////////////////////////////
    // READY TO GENERATE PASSWORD //
    ////////////////////////////////

    // Initialize the sets. The values are the ASCII codes of the different characters
    lowercase_set[0] = 97;
    lowercase_set[1] = 98;
    lowercase_set[2] = 99;
    lowercase_set[3] = 100;
    lowercase_set[4] = 101;
    lowercase_set[5] = 102;
    lowercase_set[6] = 103;
    lowercase_set[7] = 104;
    lowercase_set[8] = 105;
    lowercase_set[9] = 106;
    lowercase_set[10] = 107;
    lowercase_set[11] = 108;
    lowercase_set[12] = 109;
    lowercase_set[13] = 110;
    lowercase_set[14] = 111;
    lowercase_set[15] = 112;
    lowercase_set[16] = 113;
    lowercase_set[17] = 114;
    lowercase_set[18] = 115;
    lowercase_set[19] = 116;
    lowercase_set[20] = 117;
    lowercase_set[21] = 118;
    lowercase_set[22] = 119;
    lowercase_set[23] = 120;
    lowercase_set[24] = 121;
    lowercase_set[25] = 122;
    i = 26;
    while (i < (76)) {
        lowercase_set[(int)i] = 0;
        i += 1;
    }
    uppercase_set[0] = 65;
    uppercase_set[1] = 66;
    uppercase_set[2] = 67;
    uppercase_set[3] = 68;
    uppercase_set[4] = 69;
    uppercase_set[5] = 70;
    uppercase_set[6] = 71;
    uppercase_set[7] = 72;
    uppercase_set[8] = 73;
    uppercase_set[9] = 74;
    uppercase_set[10] = 75;
    uppercase_set[11] = 76;
    uppercase_set[12] = 77;
    uppercase_set[13] = 78;
    uppercase_set[14] = 79;
    uppercase_set[15] = 80;
    uppercase_set[16] = 81;
    uppercase_set[17] = 82;
    uppercase_set[18] = 83;
    uppercase_set[19] = 84;
    uppercase_set[20] = 85;
    uppercase_set[21] = 86;
    uppercase_set[22] = 87;
    uppercase_set[23] = 88;
    uppercase_set[24] = 89;
    uppercase_set[25] = 90;
    i = 26;
    while (i < (76)) {
        uppercase_set[(int)i] = 0;
        i += 1;
    }
    numbers_set[0] = 48;
    numbers_set[1] = 49;
    numbers_set[2] = 50;
    numbers_set[3] = 51;
    numbers_set[4] = 52;
    numbers_set[5] = 53;
    numbers_set[6] = 54;
    numbers_set[7] = 55;
    numbers_set[8] = 56;
    numbers_set[9] = 57;
    i = 10;
    while (i < (76)) {
        numbers_set[(int)i] = 0;
        i += 1;
    }
    special_set[0] = 33;
    special_set[1] = 63;
    special_set[2] = 35;
    special_set[3] = 36;
    special_set[4] = 37;
    special_set[5] = 38;
    special_set[6] = 43;
    special_set[7] = 45;
    special_set[8] = 42;
    special_set[9] = 95;
    special_set[10] = 64;
    special_set[11] = 58;
    special_set[12] = 59;
    special_set[13] = 61;
    i = 14;
    while (i < (76)) {
        special_set[(int)i] = 0;
        i += 1;
    }

    // Initialize union set FIXME IS THIS NEEDED?
    i = 0;
    while (i < (76)) {
        union_set[(int)i] = 0;
        i += 1;
    }
    

    // Generate characters with min values defined
    i_filled = 0;
    if (lowercase_max > 0) {
        i = 0;
        while (i < lowercase_min) {
            lowercase_max -= 1;
            tmp8 = random_char_generator(26, lowercase_set);
            (u8) [output_addr + i_filled] = tmp8;
            i += 1;
            i_filled += 1;
        }
    }
    if (uppercase_max > 0) {
        i = 0;
        while (i < uppercase_min) {
            uppercase_max -= 1;
            tmp8 = random_char_generator(26, uppercase_set);
            (u8) [output_addr + i_filled] = tmp8;
            i += 1;
            i_filled += 1;
        }
    }
    if (numbers_max > 0) {
        i = 0;
        while (i < numbers_min) {
            numbers_max -= 1;
            tmp8 = random_char_generator(10, numbers_set);
            (u8) [output_addr + i_filled] = tmp8;
            i += 1;
            i_filled += 1;
        }
    }
    if (special_max > 0) {
        i = 0;
        while (i < special_min) {
            special_max -= 1;
            tmp8 = random_char_generator(14, special_set);
            (u8) [output_addr + i_filled] = tmp8;
            i += 1;
            i_filled += 1;
        }
    }

    // Define set of available characters, if their maximum value has not been reached yet
    tmp64_1, union_set = define_union_set(lowercase_max, uppercase_max, numbers_max, special_max,
                        lowercase_set, uppercase_set, numbers_set, special_set, union_set);

    // Generate password from the set of available characters
    tmp64_2 = length;
    while (i_filled < tmp64_2) {
        tmp8 = random_char_generator(tmp64_1, union_set);
        if (tmp8 >= 97) { if (tmp8 <= 122) {
                lowercase_max -= 1;
                if (lowercase_max == 0) {
                    tmp64_1, union_set = define_union_set(lowercase_max, uppercase_max, numbers_max, special_max,
                                        lowercase_set, uppercase_set, numbers_set, special_set, union_set);
                }
        }} else { if (tmp8 >= 65) { if (tmp8 <= 90) {
                uppercase_max -= 1;
                if (uppercase_max == 0) {
                    tmp64_1, union_set = define_union_set(lowercase_max, uppercase_max, numbers_max, special_max,
                                        lowercase_set, uppercase_set, numbers_set, special_set, union_set);
                }
            }} else { if (tmp8 >= 48) { if (tmp8 <= 57) {
                    numbers_max -= 1;
                    if (numbers_max == 0) {
                        tmp64_1, union_set = define_union_set(lowercase_max, uppercase_max, numbers_max, special_max,
                                            lowercase_set, uppercase_set, numbers_set, special_set, union_set);
                    }
                }} else {
                    special_max -= 1;
                    if (special_max == 0) {
                        tmp64_1, union_set = define_union_set(lowercase_max, uppercase_max, numbers_max, special_max,
                                            lowercase_set, uppercase_set, numbers_set, special_set, union_set);
                    }
                }   
            }
        }
        (u8) [output_addr + i_filled] = tmp8;
        i_filled += 1;
    }

    // Generate random permutation of string
    tmp64_1 = length;
    permutation(output_addr, tmp64_1);

    // Make sure last character is \0
    [output_addr + tmp64_1] = 0;

    output = 1;

    } else {
        // Maximum values are short (Sum(Max) < length)
        output = -12; 
    }
    } else {
        // Minimum values are larger than length (Sum(Min) > length)
        output = -11; 
    }
    } else {
        // Special characters max value is smaller than min value
        output = -10; 
    }
    } else {
        // Numbers max value is smaller than min value 
        output = -9; 
    }
    } else {
        // Uppercase letters max value is smaller than min value 
        output = -8; 
    }
    } else {
        // Lowercase letters max value is smaller than min value 
        output = -7; 
    }
    } else {
        // Special characters min value is negative
        output = -6; 
    }
    } else {
        // Numbers min value is negative
        output = -5; 
    }
    } else {
        // Uppercase letters min value is negative
        output = -4; 
    }
    } else {
        // Lowercase letters min value is negative
        output = -3;
    }
    } else {
        // Length is negative
        output = -2;
    }
    } else {
        // Length is too large (length > 200)
        output = -1;
    }

    return output;

}