require import AllCore Distr List UpdateList Ring IntDiv StdOrder.
import Ring.IntID IntOrder.

type char = int.
type password = char list.
type charSet = char list.
type policy = {length : int;
               lowercaseMin : int;
               lowercaseMax : int;
               uppercaseMin : int;
               uppercaseMax : int;
               numbersMin : int;
               numbersMax : int;
               specialMin : int;
               specialMax : int
}.


op lowercaseSet = [97; 98; 99; 100; 101; 102; 103; 104; 105; 106; 107; 108; 109; 110; 111; 112;
                   113; 114; 115; 116; 117; 118; 119; 120; 121; 122].
op uppercaseSet = [65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78; 79; 80; 81; 82; 83;
                   84; 85; 86; 87; 88; 89; 90].
op numbersSet = [48; 49; 50; 51; 52; 53; 54; 55; 56; 57].
op specialSet = [33; 63; 35; 36; 37; 38; 43; 45; 42; 95; 64; 58; 59; 61].


op validPassword (pwd:password) =
  0 < size pwd <= 200 /\
  forall c, c \in pwd => c \in (lowercaseSet ++ uppercaseSet ++ numbersSet ++ specialSet).


op satisfiablePolicy (p:policy) =
  p.`length <= 200 /\
  0 < p.`length /\ 
  0 <= p.`lowercaseMin /\
  0 <= p.`uppercaseMin /\
  0 <= p.`numbersMin /\
  0 <= p.`specialMin /\
  p.`lowercaseMax <= 200 /\
  p.`uppercaseMax <= 200 /\
  p.`numbersMax <= 200 /\
  p.`specialMax <= 200 /\
  p.`lowercaseMin <= p.`lowercaseMax /\
  p.`uppercaseMin <= p.`uppercaseMax /\
  p.`numbersMin <= p.`numbersMax /\
  p.`specialMin <= p.`specialMax /\
  p.`lowercaseMin + p.`uppercaseMin + p.`numbersMin + p.`specialMin <= p.`length /\
  p.`length <= p.`lowercaseMax + p.`uppercaseMax + p.`numbersMax + p.`specialMax.


(*-------------------- Lemmas on PG types --------------------*)

lemma char_charset_size (x:char) (set:charSet) :
  x \in set =>
  0 < size set.
proof.
case set.
- by rewrite in_nil.
- move => x0 l h1. 
  rewrite /size /=.
  have h2 : 0 <= size l.
  + exact size_ge0.
  smt(). (*simple*)
qed.

lemma char_cat2 (x:char) (set1 set2:charSet) :
  x \in (set1 ++ set2) <=>
  x \in set1 \/ x \in set2.
proof.
exact mem_cat.
qed.


lemma char_cat3 (x:char) (set1 set2 set3:charSet) :
  x \in (set1 ++ set2 ++ set3) <=>
  x \in set1 \/ x \in set2 \/ x \in set3.
proof.
smt(mem_cat).
qed.


lemma char_cat4 (x:char) (set1 set2 set3 set4:charSet) :
  x \in (set1 ++ set2 ++ set3 ++ set4) <=>
  x \in set1 \/ x \in set2 \/ x \in set3 \/ x \in set4.
proof.
smt(mem_cat).
qed.


lemma disjoint_symmetry (set1 set2:charSet) :
  (forall (x : char), x \in set1 => !(x \in set2)) <=>
  (forall (x : char), x \in set2 => !(x \in set1)).
proof.
split; move => h1 x; apply contraL; apply h1.
qed.

lemma disjoint_char (set1 set2:charSet) (x:char) :
  (forall (c:char), c \in set1 => !(c \in set2)) =>
  x \in set1 =>
  !(x \in set2).
proof.
move => h1 h2.
by apply h1 in h2.
qed.

lemma disjoint_cat (set1 set2 set3:charSet) :
  (forall x, x \in set1 => ! (x \in set2)) =>
  (forall x, x \in set1 => ! (x \in set3)) =>
  forall x, x \in set1 => ! (x \in set2 ++ set3).
proof.
move => h1 h2 x h3.
have eq_not_mem: (!(x \in set2 ++ set3)) <=> !((mem set2 x) \/ (mem set3 x)).
  congr; apply eqboolP.
  apply char_cat2.
apply eq_not_mem.
rewrite negb_or.
split.
- by apply h1.
- by apply h2.
qed.


lemma charset_all (set:charSet) :
  all (mem set) set.
proof.
rewrite allP.
trivial.
qed.


lemma charset_all_concat (set1 set2:charSet) :
  all (mem (set1 ++ set2)) set1.
proof.
rewrite allP.
move => x.
elim set1.
- trivial.
- move => x0 l0 h1 h2.
rewrite /mem /= in h1.
rewrite /mem /=.
case h2.
- trivial.
- move => h3.
  right.
  by apply h1.
qed.


lemma charset_concat_all (set1 set2 set3:charSet) :
  all (mem (set1 ++ set3)) set2 =>
  (forall (x : char), x \in set2 => !(x \in set3)) =>
  all (mem set1) set2.
proof.
smt(@List).
qed.


lemma charset_disjoint_notall (set1 set2:charSet) :
  0 < size set1 =>
  0 < size set2 =>
  (forall (x : char), x \in set1 => ! (x \in set2)) =>
  !(all (mem set1) set2) /\ !(all (mem set2) set1).
proof. 
case set1.
- trivial.
- case set2.
  + trivial.
  + move => x2 l2 x1 l1 h1 h2 h3.
    split.
    * smt(@List).
    * have aux : forall (x : char), x \in x2 :: l2 => ! (x \in x1 :: l1).
      - by apply disjoint_symmetry.
      smt(@List).
qed.


lemma charset_mem_has (x:char) (set1 set2:charSet) :
  x \in set1 =>
  x \in set2 =>
  has (mem set1) set2.
proof.
case set1.
- trivial.
- case set2.
  + trivial.
  + move => x0 l0 x1 l1 h1 h2.
    rewrite hasP.
    exists x.
    trivial.
qed.


lemma charset_has (set:charSet) :
  0 < size set =>
  has (mem set) set.
proof.
case set.
- trivial.
- trivial.
qed.


lemma charset_has_empty (set:charSet) :
  !has (mem []) set.
proof.
rewrite hasPn.
move => x h1.
by rewrite in_nil.
qed.


lemma charset_has_concat (set1 set2:charSet) :
  0 < size set1 =>
  has (mem (set1 ++ set2)) set1.
proof.
smt(@List).
qed.


lemma charset_disjoint_hasnot (set1 set2:charSet) :
  (forall (x : char), x \in set1 => ! (x \in set2)) =>
  !(has (mem set2) set1).
proof.
move => h1.
rewrite hasPn.
move => x.
apply h1.
qed.


lemma allP_hasP (p : 'a -> bool) s :
  0 < size s =>
  all p s => has p s.
proof.
case s.
- trivial.
- move => x l h1.
  rewrite /all /=.
  move => [h2 h3].
  by left.  
qed.


lemma hasPn_allPn (p : 'a -> bool) s :
  0 < size s =>
  !has p s => !all p s.
proof.
case s.
- trivial.
- move => x l h1.
  rewrite hasPn allP.
  move => h2.
  apply negb_forall.
  exists (x).
  have x_in_x_l: x \in x::l.
    trivial.
  by apply h2 in x_in_x_l.
qed.


(*-------------------- SetOccurrences and its lemmas --------------------*)
op setOccurrences (set:charSet) (pw:password) : int =
  with pw = []     => 0
  with pw = x :: s => if x \in set then 1 + setOccurrences set s
                                   else 0 + setOccurrences set s.

lemma setocc_empty_pw (set:charSet) :
  setOccurrences set [] = 0.
proof.
trivial.
qed.


lemma setocc_empty_set (pw:password) :
  setOccurrences [] pw = 0.
proof.
elim pw.
- trivial.
- move => x l.
  trivial.
qed.


lemma setocc_cat (set:charSet) (pw1 pw2:password) :
  setOccurrences set (pw1 ++ pw2) = setOccurrences set pw1 + setOccurrences set pw2.
proof.
elim pw1.
- rewrite cat0s.
  trivial.
- move => x l h1.
  case (x \in set).
  + move => h2.
    by rewrite h1 h2 addzA /=.
  + move => h2.
    by rewrite h2 /=. 
qed.
    

lemma setocc_insert_inset (set:charSet) (pw:password) (x:char) :
  x \in set =>
  setOccurrences set (x :: pw) = (setOccurrences set pw) + 1.
proof.
move => h1.
elim pw.
- simplify. 
  rewrite h1 //.
- move => x0 l h2.
  rewrite /setOccurrences /= h1 /=.
  case (x0 \in set).  
  + by move => *.
  + move => *.
    ring.
qed.


lemma setocc_insert_notinset (set:charSet) (pw:password) (x:char) :
  !(x \in set) =>
  setOccurrences set (x :: pw) = setOccurrences set pw.
proof.
move => h1.
elim pw.
- simplify.
  by rewrite h1.
- move => x0 l h2.
  rewrite /setOccurrences /=.
  by rewrite h1.
qed.


lemma setocc_cat_switch (set:charSet) (pw1 pw2:password) :
  setOccurrences set (pw1 ++ pw2) = setOccurrences set (pw2 ++ pw1).
proof.
elim pw1.
- rewrite cat0s.
  by rewrite cats0.
- move => x l h1.
  case (x \in set).
  + move => h2.
    rewrite h2 /= h1 setocc_cat setocc_cat setocc_insert_inset.
    assumption.
    ring.
  + move => h2.
    rewrite h2 /= setocc_cat setocc_cat setocc_insert_notinset.
    assumption.
    ring.
qed.

lemma setocc_head_cat (set:charSet) (pw:password) (x:char) :
  setOccurrences set (x :: pw) = setOccurrences set ([x] ++ pw).
proof.
by rewrite cat1s.
qed.


lemma setocc_head_cat_right (set:charSet) (pw:password) (x:char) :
  setOccurrences set (x :: pw) = setOccurrences set (pw ++ [x]).
proof.
by rewrite setocc_cat_switch.
qed.


lemma setocc_take_drop (set:charSet) (pw:password) (n:int) :
  setOccurrences set (take n pw) + setOccurrences set (drop n pw) = setOccurrences set pw.
proof.
by rewrite -setocc_cat cat_take_drop.
qed.


lemma setocc_drop_plus1_inset (set:charSet) (pw:password) (n:int) (x:char) :
  nth x pw n \in set =>
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  setOccurrences set (drop (n) pw) - 1 = setOccurrences set (drop (n + 1) pw).
proof.
case pw.
- trivial.
- move => *.
  rewrite (drop_nth x).
  + split. assumption. move => *. assumption.
  rewrite setocc_insert_inset.
  + assumption.
  ring.  
qed.


lemma setocc_drop_plus1_notinset (set:charSet) (pw:password) (n:int) (x:char) :
  !(nth x pw n \in set) =>
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  setOccurrences set (drop n pw) = setOccurrences set (drop (n + 1) pw).
proof.
case pw.
- trivial.
- move => x0 l *.
  rewrite (drop_nth x).
  + split. assumption. move => *. assumption.
  rewrite setocc_insert_notinset.
  + assumption.
  reflexivity.  
qed.


lemma setocc_update_inset_inset (set:charSet) (pw:password) (x y:char) (n:int) :
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  nth y pw n \in set =>
  x \in set =>
  setOccurrences set (update x pw n) = setOccurrences set pw.
proof.
move => *.
rewrite /update. 
have n_0: !(n < 0).
+ by rewrite -lezNgt.
have size_n: !(size pw <= n).
+ by rewrite -ltzNge.
rewrite n_0 size_n.
simplify.
rewrite setocc_cat setocc_insert_inset.
+ assumption.
rewrite -(setocc_drop_plus1_inset set pw n y).
+ assumption.
  assumption.
  assumption.
  assumption.
simplify.
by rewrite setocc_take_drop.
qed.


lemma setocc_update_inset_notinset (set:charSet) (pw:password) (x y:char) (n:int) :
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  nth y pw n \in set =>
  !(x \in set) =>
  setOccurrences set (update x pw n) = setOccurrences set pw - 1.
proof.
move => *.
rewrite /update. 
have n_0: !(n < 0).
+ by rewrite -lezNgt.
have size_n: !(size pw <= n).
+ by rewrite -ltzNge.
rewrite n_0 size_n /= setocc_cat setocc_insert_notinset.
+ assumption.
rewrite -(setocc_drop_plus1_inset set pw n y).
+ assumption.
  assumption.
  assumption.
  assumption.
by rewrite addzA setocc_take_drop.
qed.


lemma setocc_update_notinset_inset (set:charSet) (pw:password) (x y:char) (n:int) :
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  !(nth y pw n \in set) =>
  x \in set =>
  setOccurrences set (update x pw n) = setOccurrences set pw + 1.
proof.
move => *.
rewrite /update. 
have n_0: !(n < 0).
+ by rewrite -lezNgt.
have size_n: !(size pw <= n).
+ by rewrite -ltzNge.
rewrite n_0 size_n /= setocc_cat setocc_insert_inset.
+ assumption.
rewrite -(setocc_drop_plus1_notinset set pw n y).
+ assumption.
  assumption.
  assumption.
  assumption.
by rewrite addzA setocc_take_drop.
qed.


lemma setocc_update_notinset_notinset (set:charSet) (pw:password) (x y:char) (n:int) :
  0 <= n =>
  n < size pw =>
  0 < size pw =>
  !(nth y pw n \in set) =>
  !(x \in set) =>
  setOccurrences set (update x pw n) = setOccurrences set pw.
proof.
move => *.
rewrite /update. 
have n_0: !(n < 0).
+ by rewrite -lezNgt.
have size_n: !(size pw <= n).
+ by rewrite -ltzNge.
rewrite n_0 size_n /= setocc_cat setocc_insert_notinset.
+ assumption.
rewrite -(setocc_drop_plus1_notinset set pw n y).
+ assumption.
  assumption.
  assumption.
  assumption.
by rewrite setocc_take_drop.
qed.


lemma nth_update (pw:password) (i j:int) (x:char) :
  nth x pw i = nth x (update (nth x pw i) pw j) i.
proof.
rewrite /update.
case (j < 0).
- trivial.
- case (size pw <= j).
  + trivial.
  + move => h1 h2.
    rewrite lerNgt /= in h1.
    rewrite ltrNge /= in h2.
    case (i < j).
    - move => h3.
      rewrite nth_cat size_takel.
      split. assumption. rewrite ltr_neqAle in h1. case h1. move => *. assumption.
      by rewrite h3 /= nth_take.
    - case (j < i).
      + move => h3 h4.        
        rewrite nth_cat size_takel.
        split. assumption. rewrite ltr_neqAle in h1. case h1. move => *. assumption.
        rewrite h4 /=.
        have h5 : ! i-j = 0.
        * smt().
        rewrite h5 /= nth_drop.
        smt(). smt().
        have h6 : j + 1 + (i - j - 1) = i.
        * ring.
        by rewrite h6.
      + move => h3 h4.
        have h5 : i = j.
        smt().
        subst.
        rewrite -(drop_nth x j pw).
        split. assumption. move => *. assumption.
        by rewrite cat_take_drop.
qed.

lemma setocc_swap (set:charSet) (pw:password) (x:char) (i j:int) :
  0 < i =>
  i <= size pw =>
  j < i =>
  0 <= j =>
setOccurrences set (update (nth x pw (i - 1)) (update (nth x pw j) pw (i - 1)) j) =
setOccurrences set pw.
proof.
move => *. 
case ((nth x pw (i - 1)) \in set).
- case ((nth x pw j) \in set).
  + move => *.
    rewrite (setocc_update_inset_inset set (update (nth x pw j) pw (i - 1)) (nth x pw (i-1)) x j).
    * assumption.
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * by rewrite -(nth_update).
    * assumption.
    rewrite -(setocc_update_inset_inset set pw (nth x pw j) x (i-1)).
    * smt().
    * smt().
    * smt().
    * assumption.
    * assumption.
    reflexivity.    
  + move => *.
    rewrite (setocc_update_notinset_inset set (update (nth x pw j) pw (i - 1)) (nth x pw (i-1)) x j).
    * assumption.
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * by rewrite -(nth_update).
    * assumption.
    rewrite (setocc_update_inset_notinset set pw (nth x pw j) x (i-1)).
    * smt().
    * smt().
    * smt().
    * assumption.
    * assumption.
    ring.
- case ((nth x pw j) \in set).
  + move => *.
    rewrite (setocc_update_inset_notinset set (update (nth x pw j) pw (i - 1)) (nth x pw (i-1)) x j).
    * assumption.
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * by rewrite -(nth_update).
    * assumption.
    rewrite (setocc_update_notinset_inset set pw (nth x pw j) x (i-1) ).
    * smt().
    * smt().
    * smt().
    * assumption.
    * assumption.
    reflexivity. 
  + move => *.
    rewrite (setocc_update_notinset_notinset set (update (nth x pw j) pw (i - 1)) (nth x pw (i-1)) x j).
    * assumption.
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * rewrite -(update_size ((nth x pw j)) pw (i-1)).
      smt().
    * by rewrite -(nth_update).
    * assumption.
    rewrite (setocc_update_notinset_notinset set pw (nth x pw j) x (i-1)).
    * smt().
    * smt().
    * smt().
    * assumption.
    * assumption.
    reflexivity. 
qed.


lemma setocc_eq (pwA pwB:password) (set:charSet):
  pwA = pwB =>
  setOccurrences set pwA = setOccurrences set pwB.
proof.
trivial.
qed.
