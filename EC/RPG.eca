require import AllCore Distr List.

type char = int.
type password = int list.
type charSet = int list.
type policy = {length : int;
               lowercaseMin : int;
               lowercaseMax : int;
               uppercaseMin : int;
               uppercaseMax : int;
               numbersMin : int;
               numbersMax : int;
               specialMin : int;
               specialMax : int
}.

op countOccurrences (el:char) (pw:password) : int =
  count (fun (c:char) => c = el ) pw.

op setOccurrences (set:charSet) (pw:password) : int =
  with set = []     => 0
  with set = x :: s => countOccurrences x pw + setOccurrences s pw.

op satisfiesMin (min:int) (set:charSet) (pw:password) : bool =
  min <= setOccurrences set pw.

op satisfiesMax (max:int) (set:charSet) (pw:password) : bool =
  setOccurrences set pw <= max.

(* Abstract type of a RPG *)
module type RPG_T = { 
  proc generate_password(policy:policy) : password
  proc get_lowercase() : charSet
  proc get_uppercase() : charSet
  proc get_numbers() : charSet
  proc get_special() : charSet
}.


(* Correctness definition for a RPG*)
module Correctness(RPG : RPG_T) = {


  proc main(policy:policy) : bool = {
  
    var pw : password;
    var lowercaseSet, uppercaseSet, numbersSet, specialSet : charSet;
    var lowercaseOcc, uppercaseOcc, numbersOcc, specialOcc : int;
    var satLength, satBounds : bool;

    pw <@ RPG.generate_password(policy);
    satLength <- size pw = policy.`length;

    lowercaseSet <- RPG.get_lowercase();
    uppercaseSet <- RPG.get_uppercase();
    numbersSet <- RPG.get_numbers();
    specialSet <- RPG.get_special();
    
    satBounds <- satisfiesMin policy.`lowercaseMin lowercaseSet pw /\
                 satisfiesMax policy.`lowercaseMax lowercaseSet pw /\
                 satisfiesMin policy.`uppercaseMin uppercaseSet pw /\
                 satisfiesMax policy.`uppercaseMax uppercaseSet pw /\
                 satisfiesMin policy.`numbersMin numbersSet pw /\
                 satisfiesMax policy.`numbersMax numbersSet pw /\
                 satisfiesMin policy.`specialMin specialSet pw /\
                 satisfiesMax policy.`specialMax specialSet pw;

    
    return satLength /\ satBounds;

   }

}.
