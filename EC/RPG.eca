require import AllCore Distr List UpdateList.
require (****) PG.

clone include PG.


(* Abstract type of a RPG *)
module type RPG_T = { 
  proc generate_password(policy:policy) : password
  proc get_lowercaseSet() : charSet
  proc get_uppercaseSet() : charSet
  proc get_numbersSet() : charSet
  proc get_specialSet() : charSet
}.


(* Correctness definition for a RPG*)
module Correctness(RPG : RPG_T) = {

  proc main(policy:policy) : bool = {
  
    var pw : password;
    (*var lSet, uSet, nSet, sSet : charSet;*)
    var lowercaseOcc, uppercaseOcc, numbersOcc, specialOcc : int;
    var l, satisfied : bool;

    if(policy.`length <= 200 /\
       0 < policy.`length /\ 
       0 <= policy.`lowercaseMin /\
       0 <= policy.`uppercaseMin /\
       0 <= policy.`numbersMin /\
       0 <= policy.`specialMin /\
       0 <= policy.`lowercaseMax /\
       0 <= policy.`uppercaseMax /\
       0 <= policy.`numbersMax /\
       0 <= policy.`specialMax /\
       policy.`lowercaseMin <= policy.`lowercaseMax /\
       policy.`uppercaseMin <= policy.`uppercaseMax /\
       policy.`numbersMin <= policy.`numbersMax /\
       policy.`specialMin <= policy.`specialMax /\
       policy.`lowercaseMin + policy.`uppercaseMin + policy.`numbersMin + policy.`specialMin <=
         policy.`length /\
       policy.`length <=
         policy.`lowercaseMax + policy.`uppercaseMax + policy.`numbersMax + policy.`specialMax) {

      (*lSet <- RPG.get_lowercaseSet();
      uSet <- RPG.get_uppercaseSet();
      nSet <- RPG.get_numbersSet();
      lSet <- RPG.get_specialSet();*)

      pw <@ RPG.generate_password(policy);
    
      satisfied <- (*lSet = lowercaseSet /\
                   uSet = uppercaseSet /\
                   nSet = numbersSet /\
                   sSet = specialSet /\*)
                   size pw = policy.`length /\
                   satisfiesMin policy.`lowercaseMin lowercaseSet pw /\
                   satisfiesMax policy.`lowercaseMax lowercaseSet pw /\
                   satisfiesMin policy.`uppercaseMin uppercaseSet pw /\
                   satisfiesMax policy.`uppercaseMax uppercaseSet pw /\
                   satisfiesMin policy.`numbersMin numbersSet pw /\
                   satisfiesMax policy.`numbersMax numbersSet pw /\
                   satisfiesMin policy.`specialMin specialSet pw /\
                   satisfiesMax policy.`specialMax specialSet pw;
    }
    else {
      satisfied <- true;
    }
    
    return satisfied;

   }

}.
