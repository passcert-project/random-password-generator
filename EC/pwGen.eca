(* Password Generator abstract type *)
require import AllCore IntDiv CoreMap List.
require import JModel.

require import Array76.
require import WArray76.


module type PasswordGenerator_T = {
  
  proc generatePassword(length:W64.t, lowercase_available:W64.7, lowercase_min:W64.t,
  lowercase_max:W64.t, uppercase_available:W64.7, uppercase_min:W64.t, uppercase_max:W64.t,
  numbers_available:W64.7, numbers_min:W64.t, numbers_max:W64.t, special_available:W64.7,
  special_min:W64.t, special_max:W64.t, p_output:W64.t) : result
  
}

(* If, given a concrete password generator, the main procedure of the following module
    is true with 100% probability, then it means that the password generator always terminates *)

module Termination (PasswordGenerator : PasswordGenerator_T) = {
  
  proc main(length:W64.t, lowercase_available:W64.7, lowercase_min:W64.t, lowercase_max:W64.t,
  uppercase_available:W64.7, uppercase_min:W64.t, uppercase_max:W64.t, numbers_available:W64.7,
  numbers_min:W64.t, numbers_max:W64.t, special_available:W64.7, special_min:W64.t,
  special_max:W64.t, p_output:W64.t) : bool = {
    
    var password;
    password <- PasswordGenerator.generatePassword(policies);
    return True;
  }
  
}


(* If, given a concrete password generator, the main procedure of the following module
    is true with 100% probability, then we say that the password generator is correct *)

module Correctness (PasswordGenerator : PasswordGenerator_T) = {
  
  proc main(length:W64.t, lowercase_available:W64.7, lowercase_min:W64.t, lowercase_max:W64.t,
  uppercase_available:W64.7, uppercase_min:W64.t, uppercase_max:W64.t, numbers_available:W64.7,
  numbers_min:W64.t, numbers_max:W64.t, special_available:W64.7, special_min:W64.t,
  special_max:W64.t, p_output:W64.t) : bool = {
    
    var password;
    password <- PasswordGenerator.generatePassword(policies);
    return meetsPolicies(policies,password);
  }
  
}
