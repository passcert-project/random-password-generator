require import AllCore Distr Dexcepted DInterval List UpdateList.
require (****) PasswordGenerationTh.

clone include PasswordGenerationTh.

(* Abstract type of an RPG *)
module type RPG_T = { 
  proc generate_password(policy:policy) : password option
}.


(*******************************)
(*         CORRECTNESS         *)
(*******************************)

op satisfiesLength (p:policy) (pw:password) : bool =
  size pw = p.`length.

op satisfiesSetBounds (min max:int) (set:charSet) (pw:password) : bool =
 min <= setOccurrences set pw <= max.

op satisfiesBounds (p:policy) (pw:password) : bool =
  p.`lowercaseMin <= setOccurrences lowercaseSet pw <= p.`lowercaseMax /\
  p.`uppercaseMin <= setOccurrences uppercaseSet pw <= p.`uppercaseMax /\
  p.`numbersMin <= setOccurrences numbersSet pw <= p.`numbersMax /\
  p.`specialMin <= setOccurrences specialSet pw <= p.`specialMax.

op satisfiesPolicy (p:policy) (pw:password) : bool =
  satisfiesLength p pw /\ satisfiesBounds p pw.

op doesNotSatisfyPolicy (p:policy) (pw:password) : bool =
  !(satisfiesPolicy p pw).


(* Correctness definition for an RPG *)
module Correctness(RPG : RPG_T) = {

  proc main(policy:policy) : bool = {
  
    var pw : password option;
    var satisfied : bool;

    pw <@ RPG.generate_password(policy);

    if(satisfiablePolicy policy) {
    
      satisfied <- is_some pw /\ satisfiesPolicy policy (oget pw);
    }
    else {
      satisfied <- is_none pw;
    }
    
    return satisfied;

   }

}.



(*******************************)
(*          SECURITY           *)
(*******************************)

(* Distribution over passwords *)
op dpassword : password distr.

axiom dpassword_ll : is_lossless dpassword.
axiom dpassword_uni : is_uniform dpassword.
axiom dpassword_supp : forall p, p \in dpassword => validPassword p.
axiom dpassword_fu : is_full dpassword.

(* Ideal RPG Oracle *)
module IdealRPG  = {

  proc generate_password(policy:policy) = {
    var pw;
    var out;
    
    if(satisfiablePolicy policy) {
      (*pw <$ dpassword \ (fun pass => !(satisfiesLength policy pw) /\ !(satisfiesBounds policy pw));*)
      pw <$ dpassword \ doesNotSatisfyPolicy policy;
      out <- Some pw;
    } else {
      out <- None;
    }

    return out;
  }

}.


(* Module for testing equivalence proofs *)
module Test = {

  proc uniformRangeDistr(range:int) = {
    var out;
    out <$ [0 .. range];
    return out;
  }

}.
