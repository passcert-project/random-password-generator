require import AllCore Distr List UpdateList.
require (****) PasswordGenerationTh.

clone include PasswordGenerationTh.


(* Abstract type of a RPG *)
module type RPG_T = { 
  proc generate_password(policy:policy) : password
  proc get_lowercaseSet() : charSet
  proc get_uppercaseSet() : charSet
  proc get_numbersSet() : charSet
  proc get_specialSet() : charSet
}.



(*******************************)
(*         CORRECTNESS         *)
(*******************************)

(* Correctness definition for a RPG*)
module Correctness(RPG : RPG_T) = {

  proc main(policy:policy) : bool = {
  
    var pw : password;
    var satisfied : bool;

    if(policy.`length <= 200 /\
       0 < policy.`length /\ 
       0 <= policy.`lowercaseMin /\
       0 <= policy.`uppercaseMin /\
       0 <= policy.`numbersMin /\
       0 <= policy.`specialMin /\
       0 <= policy.`lowercaseMax /\
       0 <= policy.`uppercaseMax /\
       0 <= policy.`numbersMax /\
       0 <= policy.`specialMax /\
       policy.`lowercaseMin <= policy.`lowercaseMax /\
       policy.`uppercaseMin <= policy.`uppercaseMax /\
       policy.`numbersMin <= policy.`numbersMax /\
       policy.`specialMin <= policy.`specialMax /\
       policy.`lowercaseMin + policy.`uppercaseMin + policy.`numbersMin + policy.`specialMin <=
         policy.`length /\
       policy.`length <=
         policy.`lowercaseMax + policy.`uppercaseMax + policy.`numbersMax + policy.`specialMax) {

      pw <@ RPG.generate_password(policy);
    
      satisfied <- size pw = policy.`length /\
                   satisfiesMin policy.`lowercaseMin lowercaseSet pw /\
                   satisfiesMax policy.`lowercaseMax lowercaseSet pw /\
                   satisfiesMin policy.`uppercaseMin uppercaseSet pw /\
                   satisfiesMax policy.`uppercaseMax uppercaseSet pw /\
                   satisfiesMin policy.`numbersMin numbersSet pw /\
                   satisfiesMax policy.`numbersMax numbersSet pw /\
                   satisfiesMin policy.`specialMin specialSet pw /\
                   satisfiesMax policy.`specialMax specialSet pw;
    }
    else {
      satisfied <- true;
    }
    
    return satisfied;

   }

}.



(*******************************)
(*          SECURITY           *)
(*******************************)


(* Real RPG Oracle *)
module RealRPG(RPG : RPG_T) : Orcl = {

  proc generate_password(p:policy) = {
    var pw;
    pw <@ RPG.generate_password(p);
    return pw;
  }

}.

(* 
In this case advantage is of the form.
| Pr[RPGGame(A, RealRPG(Scheme)).main() @ &m : res ] - 
  Pr[RPGGame(A, IdealRPG).main() @ &m : res ]|
*)
